/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package parser;

import java.io.IOException;
import java.util.*;

import tech.tablesaw.api.Table;
import tech.tablesaw.api.StringColumn;

public class App {
    public static void main(String[] args) throws IOException, InterruptedException {
//        ts();
        test();
    }

    private static void test() {
        var ts = new Tablesaw();

        String k;
        String fn;
//            fn = "src/main/resources/sample.csv";
        fn = "/Users/edwards/projects/KeystrokeDatasets/2021/keystrokes-with-key.csv";

        final String fileName = fn;
        Table dataframe = ts.readFileTest(fileName);
        // Debug
//        ts.printHeaders(dataframe);
//        List<String> keys = ts.createKeys(dataframe);
//        System.out.println("\nUnique keys in file: " + keys.size());
//        System.out.println("\n");

//        StringColumn kc = StringColumn.create("Key");
//        dataframe.addColumns(kc);
//        List<String> keys = new ArrayList<>();
//        for (String subjectID:dataframe.stringColumn("SubjectID").unique()) {
//            Table df = dataframe.where(dataframe.stringColumn("SubjectID").isEqualTo(subjectID));
//            for (String a:df.stringColumn("AssignmentID").unique()) {
////                System.out.println(subjectID + " " + f);
//                Table df2 = dataframe.where(df.stringColumn("AssignmentID").isEqualTo(a));
//                for (String f:df2.stringColumn("CodeStateSection").unique()) {
//                    Table df3 = df2.where(df2.stringColumn("CodeStateSection").isEqualTo(f));
//                    String key = String.format("%s_%s_%s", subjectID, a, f);
//                    StringColumn keyCol = df3.stringColumn("Key");
//                    for (int i = 0; i < df3.rowCount(); ++i) {
//                        keyCol.set(i, key);
//                    }
//                    keys.add(key);
//                }
//            }
//        }

//        for (String key:dataframe.stringColumn("Key").unique()) {
//            System.out.println(key);
//        }

//        String key = "Student10_Assign10_Chessboard.py";
//        String key = "Student28_Assign13_wordinator.py";
        String key = "Student12_Assign6_task1.py";
//        String key = "Student1_Assign12_task1.py";
//        String key = "Student1_Assign12_task1.py";
        Table selection = dataframe.where(dataframe.stringColumn("Key").isEqualTo(key).and(dataframe.stringColumn("EventType").isEqualTo("File.Edit")));
//        System.out.println(selection.first(10));

        System.out.println("Reconstructing " + key);
        Reconstruction reconstruction = new Reconstruction(selection);
//        int start = 0, len = 3;
//        Trees origTrees = new Trees(reconstruction.trees.subList(start, start + len));
        Trees origTrees = new Trees(reconstruction.trees);

        System.out.println(reconstruction.codeStates.get(reconstruction.codeStates.size()-1));

        origTrees.outputGraphViz("orig.dot");
        Trees prunedTrees = origTrees.prune();
        prunedTrees.outputGraphViz("pruned.dot");
        Trees reconTrees = prunedTrees.reconstructFromPruned();
        reconTrees.outputGraphViz("recon.dot");
        origTrees.checkEqual(reconTrees);
    }

    private static void ts() {
        //--------------------------------------------------------------------
        // Note: This code relies on changes being local. That is, no single
        // event can have both an insertion and a deletion, and all insertions
        // and deletions are contiguous.
        //
        // Also, if insert or delete is whitespace it must be quoted. If
        // pre-processing with Pandas, use quote=csv.QUOTE_NONNUMERIC.
        //--------------------------------------------------------------------

        var ts = new Tablesaw();

        boolean simpleTest = false;

        String k;
        String fn;
        if (simpleTest) {
            fn = "/Users/edwards/projects/SQLiteToProgSnap2/parse.csv";
            k = "student__main.py";
        } else {
            fn = "src/main/resources/sample.csv";
//            fn = "/Users/edwards/projects/KeystrokeDatasets/2021/keystrokes.csv";
            k = "Student1_Assign12_task1.py";
        }
        final String fileName = fn;
        final String key = k;
        Table dataframe = ts.readFileTest(fileName);
        // Debug
        ts.printHeaders(dataframe);
//        List<String> keys = ts.createKeys(dataframe);
//        System.out.println("\nUnique keys in file: " + keys.size());
//        System.out.println("\n");
        System.out.println(dataframe.stringColumn("Key").unique());
        for (String k2:dataframe.stringColumn("Key").unique()) {
            System.out.println(k2);
        }

        Table selection = ts.selectTask(dataframe, key);
        Reconstruction reconstruction = new Reconstruction(selection);
        Trees origTrees;
        if (simpleTest) {
            origTrees = new Trees(reconstruction.trees);
        } else {
//            int start = 30, len = 50;
//            origTrees = new Trees(reconstruction.trees.subList(start, start + len));
            origTrees = new Trees(reconstruction.trees);
        }


//        Trees origTrees = new Trees(reconstruction.trees);
        origTrees.outputGraphViz("orig.dot");
//        origTrees.outputJSON();

        Trees prunedTrees = origTrees.prune();
        prunedTrees.outputGraphViz("pruned.dot");
        Trees reconTrees = prunedTrees.reconstructFromPruned();
        reconTrees.outputGraphViz("recon.dot");
        origTrees.checkEqual(reconTrees);


//        System.out.println(reconstruction.codeStates.get(n));
//        outputGraphViz(tree);

//        outputGraphViz(findChanged(trees.get(n), trees.get(n+1)));
//        reconstruction.debug();
    }
}
