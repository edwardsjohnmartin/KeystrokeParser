/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package parser;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;

import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;

import parser.antlr.PythonLexer;
import parser.antlr.PythonParser;
import parser.antlr.PythonParser.RootContext;
import tech.tablesaw.api.Table;

public class App {
    public static void main(String[] args) throws IOException, InterruptedException {
        ts();
        // getReconTrees();
    }

    private static void getReconTrees() throws IOException {
        // run.tree2dot(run.createTreeFromFile("src/main/resources/test1/1.py"));
        // run.tree2dot(run.createTreeFromFile("src/main/resources/test1/2.py"));
        // run.tree2dot(run.createTreeFromFile("src/main/resources/test1/3.py"));

        List<Node> origTrees = new ArrayList<>();
        origTrees.add(MyVisitor.toSimpleTree(Parser.createTreeFromFile("src/main/resources/test1/1.py")));
        origTrees.add(MyVisitor.toSimpleTree(Parser.createTreeFromFile("src/main/resources/test1/2.py")));
        origTrees.add(MyVisitor.toSimpleTree(Parser.createTreeFromFile("src/main/resources/test1/3.py")));

        // Set up id2node
        Map<Integer, Node> id2node = new HashMap<>();
        Node.Visitor v = n -> id2node.put(n.getId(), n);
        for (Node root : origTrees) {
            root.traverse(v);
        }

        // Test resetIds
        // orig2.resetIds(orig1.getId()+1);

        // Prune trees
        List<Node> prunedTrees = new ArrayList<>();
        prunedTrees.add(origTrees.get(0));
        prunedTrees.get(0).setIsReference(true);
        prunedTrees.add(id2node.get(42));
        prunedTrees.get(1).setTparent(id2node.get(13));
        prunedTrees.add(id2node.get(80));
        prunedTrees.get(2).setTparent(id2node.get(45));

        // Test reconstruction
        List<Node> reconTrees = new ArrayList<>();
        for (Node pruned : prunedTrees) {
            if (pruned.isReference()) {
                reconTrees.add(pruned);
            } else {
                Node ref = reconTrees.get(reconTrees.size() - 1);
                Node copy = new Node(ref);
                copy.replace(pruned);
                copy.resetIds(ref.getId() + 1);
                reconTrees.add(copy);
            }
        }

        System.out.println("digraph G {");
        for (Node root : origTrees) {
            // for (Node root:prunedTrees) {
            // for (Node root:reconTrees) {
            System.out.println(root.toDot());
        }
        System.out.println("}");
    }

    private static void ts() {
        var ts = new Tablesaw();

        final String fileName = "src/main/resources/sample.csv";
        Table dataframe = ts.readFile(fileName);
        ts.printHeaders(dataframe);

        List<String> keys = ts.createKeys(dataframe);
        System.out.println("\nUnique keys in file: " + keys.size());
        System.out.println("\n");

        final String key = "Student1_Assign12_task1.py";
        Table selection = ts.selectTask(dataframe, key);
        Reconstruction reconstruction = new Reconstruction(selection);
        reconstruction.trees.get(0);
    }
}
