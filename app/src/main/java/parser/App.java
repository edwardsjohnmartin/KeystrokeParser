/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package parser;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.UUID;

import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;

import parser.antlr.PythonLexer;
import parser.antlr.PythonParser;
import parser.antlr.PythonParser.RootContext;
import parser.antlr.PythonParserVisitor;

public class App {
    public static void main(String[] args) throws IOException {
        Tablesaw ts = new Tablesaw();
        ts.test();

        /*
         * App run = new App();
         * run.warmup();
         * final String content = new
         * String(Files.readAllBytes(Paths.get("src/main/resources/1")));
         * RootContext tree = run.createTree(content);
         * run.tree2dot(tree);
         * 
         * System.out.println("\nTesting ANTLR Execution on 10000 medium trees");
         * long startTime = System.nanoTime();
         * run.testAntlr();
         * long duration = (System.nanoTime() - startTime) / 1000000;
         * System.out.println("Time taken: " + duration + " ms");
         * 
         * System.out.println("\nTesting Threaded ANTLR Execution on 10000 medium
         * trees");
         * startTime = System.nanoTime();
         * run.testThreadedAntlr();
         * duration = (System.nanoTime() - startTime) / 1000000;
         * System.out.println("Threaded Time taken: " + duration + " ms\n");
         */
    }

    public void warmup() {
        createTree("x: int = 1");
    }

    public RootContext createTree(String input) {
        CharStream in = CharStreams.fromString(input);
        PythonLexer lexer = new PythonLexer(in);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        PythonParser parser = new PythonParser(tokens);

        parser.setBuildParseTree(true);
        parser.removeErrorListeners();

        RootContext tree = parser.root();
        PythonParserVisitor visitor = new MyVisitor();
        visitor.visit(tree);

        // System.out.println(tree.toStringTree(parser));
        return parser.root();
    }

    public void testAntlr() throws IOException {

        final String content = new String(Files.readAllBytes(Paths.get("src/main/resources/test0/1")));
        for (int i = 0; i < 10000; ++i) {
            RootContext tree = createTree(content);
            FileWriter writer = new FileWriter("output/test" + UUID.randomUUID() + ".txt");
            writer.write(tree.toString());
            writer.close();
        }
    }

    public void testThreadedAntlr() throws IOException, InterruptedException {
        ArrayList<Thread> threads = new ArrayList<>(10000);

        final String content = new String(Files.readAllBytes(Paths.get("src/main/resources/test0/1")));
        for (int i = 0; i < 10000; ++i) {

            @SuppressWarnings("preview")
            Thread thread = Thread.startVirtualThread(() -> {
                try {
                    RootContext tree = createTree(content);
                    FileWriter writer = new FileWriter("output/test" + UUID.randomUUID() + ".txt");
                    writer.write(tree.toString());
                    writer.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            });
            threads.add(thread);

        }

        for (Thread thread : threads) {
            thread.join();
        }
    }
}
